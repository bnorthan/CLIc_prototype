message(STATUS "Searching for backend dependencies")

set(CLE_OPENCL false)
set(CLE_CUDA false)

if (CLE_BACKEND_TYPE STREQUAL "OPENCL" OR CLE_BACKEND_TYPE STREQUAL "ALL")
    message(STATUS "Search OpenCL library")
    if (DEFINED OpenCL_LIBRARIES AND DEFINED OpenCL_INCLUDE_DIRS)
        set(OpenCL_FOUND true)
    else()
        find_package(OpenCL)
        if (OpenCL_FOUND)
            set(OpenCL_LIBRARIES ${OpenCL_LIBRARIES})
            set(OpenCL_INCLUDE_DIRS ${OpenCL_INCLUDE_DIRS})
        endif()
    endif()
    if (OpenCL_FOUND)
        set(CLE_OPENCL true)
        message(STATUS "OpenCL library : ${OpenCL_LIBRARIES}")
        message(STATUS "OpenCL includes : ${OpenCL_INCLUDE_DIRS}")
    endif()
endif()

if (CLE_BACKEND_TYPE STREQUAL "CUDA" OR CLE_BACKEND_TYPE STREQUAL "ALL")
    message(STATUS "Search CUDAToolkit library")
    if (DEFINED CUDAToolkit_LIBRARY_DIR AND DEFINED CUDAToolkit_INCLUDE_DIRS)
        set(CUDAToolkit_FOUND true)
    else()
        find_package(CUDAToolkit)
        if (CUDAToolkit_FOUND)
            set(CUDAToolkit_LIBRARY_DIR ${CUDAToolkit_LIBRARY_DIR})
            set(CUDAToolkit_INCLUDE_DIRS ${CUDAToolkit_INCLUDE_DIRS})
        endif()
    endif()
    if (CUDAToolkit_FOUND)
        set(CLE_CUDA true)
        message(STATUS "CUDAToolkit library : ${CUDAToolkit_LIBRARY_DIR}")
        message(STATUS "CUDAToolkit includes : ${CUDAToolkit_INCLUDE_DIRS}")
    endif()
endif()

if (NOT OpenCL_FOUND AND NOT CUDAToolkit_FOUND)
    message(FATAL_ERROR "No GPU framework found (OpenCL, CUDA). Please provide one of these GPU frameworks in order to compile the library.")
endif()

# add the variables to the compile definitions for the source code
add_compile_definitions(
    $<$<BOOL:${CLE_CUDA}>:CLE_CUDA>
    $<$<BOOL:${CLE_OPENCL}>:CLE_OPENCL>
)

if (CLE_OPENCL)
    message(STATUS "Building for OpenCL Backend")
endif()
if (CLE_CUDA)
    message(STATUS "Building for CUDA Backend")
endif()
